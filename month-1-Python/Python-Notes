# Introduction of Python:-
         - python is a high level , easy to learn programming language that is widely used in Data science .
         - Python have easy to Write & Read Syntax.Python have large no.of labraries.
         - Strong communication Supports.

# Why Python For Data Sci:-
         -In Data Science Python is Used to collect,clean,analyze,visualize and help to predict data.
         -It's used Labraries like 
  - Pandas
  - Numpy
  - Matplotib
  - Scikit-learn

# Variaables and DataTypes :-
            - Variables are containers for storing data values.
            - You don’t need to declare the type; Python automatically understands it.
            - python variables are case sensitive.
            - pyhton allow assinging values to multiple variables in a single line.

# EX :-
     a = 10 
           a is name of the variable and 10 is value store in x variable.

# Datatype :-

  a =  10  ---> int
  b = 23.4 ---> float
  c = "nit" ---> str
  d = True ---> boolean
  e = 1+2j ---> complex

# Pyhton-TypeCasting:-
             -Type Casting in Python refers to the process of converting the data type of a variable from one type to another,
such as from a string to an integer, a float to an integer, etc.

# Data Structure in pyhton :-

       # Data Type :-
                -User or Developer define only one value.
       # Data Structure :-
                 -User or Developer can define more than one values.
       # Matrix :-
              -Tables(rows and columns ).

   matrix = collection of data structures .
   data structure = collection of data types.

#python Data Structure are devided into 2 types :-

                      1) Inbuild DS :- List , Tuples , Set , Dict .
                      2) User def DS :- Stack, Linkedlist , Heap , Tree , ( normally used by some labraries ).

# Inbuild Data Structure
1) List :-
         - List is Growable.
         - List define with []
         - Duplicates are allowed.
         - Multiple datatypes can declare.
         - List is Mutable (you can change values).

# Methods of List :-

1) append() :-
      - It's a build in method in pyhton used to add an item to the end of a list.
2) copy() :-
    - copy() is a built-in method used to create a shallow copy of a list.
3) Count() :-
    - count() returns the number of times a specific value appears in a list.
4) pop() :-
    - pop() removes and returns an element from a list by index; if no index is given, it removes the last item.

5) remove() :-
    - remove() deletes the first occurrence of a specified value from the list (does not return it).
6) Difference Between pop() and remove():-
    - pop(index) removes and returns an item by index.
    - remove(value) deletes the first matching value (does not return it).
7) insert():-
    - insert(index, value) adds a value at the specified index in the list without replacing existing elements.
8) extned():-
    -extend() adds each element from another list to the end of the current list.
9) reverse() :-
    - reverse() reverses the elements of the list in place (modifies the original list).

10) sort() :-
     - sort() arranges the elements of a list in ascending (default) or descending order.
11) clear() :-
     - clear() removes all elements from the list, making it an empty list.
12) del listname :-
     - del deletes the entire list from memory (not just its contents).
13) len() :-
     - len() returns the total number of items in a list.

2) Tuple :-
        -Tuple is an ordered collection of elements.
        -Tuple are immutable.
        -Once created, you cannot change its values.

            ex----> tup1 = (1,2,3,4,"rehan") # tuple

 # Methods of Tuple :-

      1) count(x)	:-
            -Counts how many times x appears..
      2)index(x) :-
            -Returns the first index where x is located	.

3) Dictionary :-
        - Dictionary is an unordered collection of key values pairs enclosed with {}.
        - Dict is Mutable.

  # Methods of Dict :-

       1) keys() :-
             -Returns a view of all the keys.
       2) values() :-
            - Returns a view of all the values.
       3) update() :-
            - Updates dictionary with another dictionary or key-value pair.
       4) pop():-
           - Removes a key and returns its value.
       5) clear() :-
           - clear all dict elements.

4) Set :-
      - set is an unorderd collection of elemnts enclosed in {}.
      - Duplicates are not allowed in set.
      - Automatically removes repeated items.

  # Methods of LisSrt :-

    1) add() :- 
            - add new element.
    2) remove() :-
            - remove if found , Error if not found.
    3) discard() :-
            - No error if not found.
    4) union() :-
            - Combines sets (all unique elements).
    5) intersection() :-
            - print Common elements from two sets

   # Superset , Subset , Disjoint :-

    1) issuperset() :-
            -Checks if a set contains all elements of another set.
    2) issubset():-
            - Checks if all elements of one set are present in another.
    3) isdisjoint() :-
            - Checks if two sets have no elements in common.

# range() :-
     - range() is used to generate a sequence of numbers.

- EX ---> list(range(0,10)) 
- O/P :- [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

- start → (Optional) Starting number (default is 0)
- stop → (Required) The number at which the range stops (not included)
- step → (Optional) The increment (default is 1)

* Common Use Cases:-
- For loops
- Generating sequences
- Iterating indexes in lists

# Operators :-
    # Operator: A symbol that performs an operation (like +, -, *, etc.).
    # Operand: The value or variable the operator works on.
# Types of operators:-

1) Arithmetic Operators :-
       - Arithmetic operator used for mathematical operations.
    # Example (a = 10, b = 3)

Operator	  Description	        Example
   +	  Addition	       a + b = 13
   -	  Subtraction	       a - b = 7
   *	  Multiplication	       a * b = 30
   /	  Division (float)       a / b = 3.333
  //	  Floor Division	       a // b = 3
  %	  Modulus (remainder)    a % b = 1
  **	  Exponentiation	       a ** b = 1000

2) Assignment Operators :-
        - Assignment Operators used to assign values.

Operator        Name	          Example	     Meaning
  =	Assignment	         x = 5	    Assign 5 to x
  +=	Add and Assign	         x += 3	    x = x + 3
  -=	Subtract and Assign	x -= 2	    x = x - 2
  *=	Multiply and Assign	x *= 4	    x = x * 4
  /=	Divide and Assign  	x /= 2	    x = x / 2
  //=	Floor Divide and Assign	x //= 2	    x = x // 2
  %=	Modulus and Assign	x %= 2	    x = x % 2
  **=	Exponentiate and Assign	x **= 2	    x = x ** 2

3) unary Operators :-
         - Unary operators are operators that operate on only one operand.
         - They are used to modify the sign, value, or truth value of a single variable or expression.

Operator    Name	                Description	              Example
  +	Unary Plus	Returns the value unchanged	     +5 → 5
  -	Unary Minus	Negates the value (makes it negative)    -5 → -5


4) Relational Operators :-
        - Relational Operators used to compare two values; result is True or False.
      # Example (a = 5, b = 3)

Operator       Name	        Example
  ==	   Equal	              a == b → False
  !=	   Not equal	     a != b → True
  >	   Greater than	     a > b → True
  <	   Less than	     a < b → False
  >=	   Greater or equal    a >= 5 → True
  <=	   Less or equal	     a <= 3 → False

5) Logical opertors :-
         - Logical opertors return True or False based on the logic.

Operator	   Name	                       Description	                                 Example
  and	Logical AND	Returns True only if both conditions are True	True and False → False
  or	Logical OR	Returns True if at least one condition is True	True or False → True
  not	Logical NOT	Reverses the Boolean value                   	not True → False


#  Number System Conversion :-
           - Python provides built-in functions to convert numbers between different number systems.
           - Number system conversion means changing a number from one system to another, like from Decimal to Binary, Octal, or Hexadecimal.

1) Binary :- 
      - Base 2 (0 , 1), Used in computer.
2) Octal :-
       - Base 28 (0 , 7),used in low-level computing.
3) Decimal :-
       - Base 2 (0 , 9), our regular number.
4) Hexadecimal :-
       – Base 16 (0–9, A–F), compact form for binary.

# Built-in functions to convert between these systems:-

- bin() – Converts a decimal to binary.
- oct() – Converts a decimal to octal.
- hex() – Converts a decimal to hexadecimal.
- int() – Converts from other systems to decimal.

# Swap Variables in python :-
- In Python, swapping values between two variables is very easy and doesn’t need a third variable.
- ex :- a, b = b, a

# Introduce id() :-
- The id() function returns the unique memory address (identity) of an object in Python.
- ex :- id(object) 

# Math Module :-
      - The math module provides mathematical functions like square roots, trigonometry, logarithms, and constants.
      - You need to import it first ( import math ).
# Ex :-
   - math.sqrt(16) → 4.0  --> Square root of 16
   - math.floor(2.9) → 2  --> Round down to nearest integer
   - math.ceil(2.1) → 3  -->  Round up to nearest integer
   - math.pi  --> π constant (~3.1416)

# Bit wisw Operators :-
       - Bitwise operators work on the binary (bit-level) representation of integers.
       - They are used to perform bit-by-bit operations.
        (a = 5, b = 3)

Operator	Name	         Description	                            Example 
&	AND	         1 if both bits are 1	                  a & b → 1
|	OR	         1 if at least one bit is 1	                  a | b → 7               
^	XOR	         1 if bits are different	                  a ^ b → 6
~	complement	Inverts all bits (1’s complement)	         ~a → -6
<<	Left Shift	Shifts bits left (adds 0s on the right)	a << 1 → 10
>>	Right Shift	Shifts bits right (drops bits on the right)	a >> 1 → 2

# String :-
      - A string is a sequence of characters enclosed in quotes (' ', " ", or ''' ''').
      - Strings are immutable (cannot be changed after creation).
 # Ex :-
    - name = "adnan"
    - message = """This is
      a multi-line string."""

# Escape characters :-
  -  \'   --> Single quote
  -  \"   --> Double quote
  -  \n   --> New line
  -  \t   --> Tab
  -  \\   --> Backslash

# Raw string :-
    - A raw string entirely ignores all escape characters and prints any backslash that appears in the string.

# Str Methods :-
   1) upper() :- Converts to uppercase.
   2) lower() :- Converts to lowercase.
   3) title() :- Capitalizes first letter of each word.
   4) strip() :- Removes leading/trailing spaces.
   5) replace() :- Replaces part of the string.
   6) split() :- Splits string into a list.
   7) join() :- Joins list elements into a string.
   8) count() :- Counts number of occurrences.
   9) startswith() :- Checks if string starts with substring.
   10) endswith() :- Checks if string ends with substring.
   11) isalpha() :- True if all characters are letters.
   12) find() :- Finds first index of substring.
   13) rfind() :- Finds last index of substring.

# Intro to NumPy :-
     - NumPy (Numerical Python) is a powerful Python library.
     - Creating and manipulating arrays.
     - Performing mathematical, statistical, and linear algebra operations efficiently.

# Importing NumPy :-
    - ( import numpy as np ).

# NumPy Methods :-
 1) np.arange() :- Creates arrays with regularly spaced values.
 2) np.zeros() :- Creates an array filled with 0s.
 3) np.ones() :- Creates an array filled with 1s.
 4) reshape() :- Changes the shape of an array without changing its data.
 5) np.full() :- Create an array with a specific value.
 6) flatten() :- Converts a 2D array into 1D.
 7) indexing :- arr[0, 1] Element at row 0, column 1
 8) Sciling :- arr[:, 0]  All rows, column 0
                          arr[1:, 1:] # From row 1, col 1 onward

# Boolean Masking :-
        - Boolean masking is a way to filter arrays using conditions. It returns only the elements that satisfy the condition.
  Ex :-
       arr = np.array([10, 20, 30])
       arr[arr > 15]  # → [20 30]

# Arithmetic Operations in NumPy :-
      - NumPy allows you to perform element-wise arithmetic directly on arrays — this means operations are applied to each element automatically.
  Ex :- 
  arr1 + arr2 :- Element-wise addition
  arr1 - arr2 :- Element-wise subtraction
  arr1 * arr2 :- Element-wise multiplication
  arr1 / arr2 :- Element-wise division

#  Random in NumPy :-
        - NumPy provides powerful functions to generate random numbers for simulations, testing, and machine learning.

 1) np.random.rand() :-
            - Generates random float values between 0 and 1.
            - Shape can be 1D, 2D, etc.
  Ex :-
      np.random.rand(2, 3)
     # Output:
        [[0.12 0.56 0.90]
        [0.22 0.45 0.76]]
 2) np.random.randint() :-
             - Returns random integers from a specified range.
  Ex :-
       np.random.randint(1, 10, 5)
       # Output: 
            [5 8 1 9 3] → Random integers from 1 to 9

 3) np.random.choice() :-
             - Randomly picks values from a list or array.
  Ex :-
       arr = [10, 20, 30, 40]
       np.random.choice(arr,2)
       # Output:
              [20 40]  → (Randomly picked values)

# Axis in NumPy :-

      - In NumPy, axis defines the direction along which operations like sum(), mean(), etc., are performed on arrays.
      - Axis 0 (vertical) → operates column-wise.
      - Axis 1 (horizontal) → operates row-wise.
# Ex :-
      arr = np.array([[1, 2, 3],
                [4, 5, 6]])
      # Sum :- np.sum(arr, axis=0)
         O/p :- [5 7 9] → sum column-wise
      # Sum :- np.sum(arr, axis=1)
         O/p :-  [6 15]  → sum row-wise
      # Mean :-
        np.mean(arr, axis=0) →  [2.5 3.5 4.5]
        np.mean(arr, axis=1) →  [2.0 5.0]

# Sort :-
     - Sorts the array but returns a new sorted array (doesn’t change original).
     - Works row-wise or column-wise using axis.
# Ex :-
arr = np.array([[3, 1, 2],
               [6, 4, 5]])

# Sort each row :- np.sort(arr, axis=1)
      O/p:- [[1 2 3]
            [4 5 6]]
# Sort each column :- np.sort(arr, axis=0)
     O/p:- [3 1 2] 
           [6 4 5]

# delete :-

     - Deletes rows or columns from an array.
     - Syntax :- np.delete(array, index, axis).

# Statistical Operations in NumPy :-

            - NumPy makes it easy to perform basic statistical calculations on arrays.
    1) mean() → Average value :-
            arr = np.array([10, 20, 30, 40])
            np.mean(arr)   O/p :- 25.0
    2) median() → Middle value:-
            arr = np.array([10, 30, 20])
            np.median(arr)   O/p :- 20.0
    3) std() → Standard deviation :-
           -  Measures the spread of data from the mean.
           arr = np.array([1, 2, 3, 4])
           np.std(arr)   O/p :- 1.118...
    4) min() and max() :-
           np.min(arr)  O/p :- 1  
           np.max(arr)  O/p :- 4
    5) sum() :-
           np.sum(arr)  O/p :- 10  

# Reverse an Array in NumPy :-
        - np.flip() is used to reverse elements in a NumPy array.
        - It can reverse the whole array or along a specific axis.

# Ex :-
           arr = np.array([1, 2, 3, 4, 5])
           np.flip(arr)
           O/p :- [5 4 3 2 1]

# Matplotlib in Python :-
      - Matplotlib is a data visualization library in Python.
      - It is used to create static, interactive, and animated plots and charts.
      
# Importing Matplotlib :-
        ( import matplotlib.pyplot as plt ).
   - matplotlib is the library.
   - pyplot is a module inside it that provides functions to draw plots.

#  Why Use Matplotlib :-
       - Visualizes data clearly (e.g., line charts, bar graphs, pie charts).
       - Helps in data analysis and comparison.

# Where Matplotlib is Used :-

       1) Data Visualization :-
                - Create graphs like line plots, bar charts, pie charts, etc.
                - Turn raw data into visual stories.
       2) Exploratory Data Analysis (EDA) :-
                - Helps explore datasets.
                - Identify patterns, trends, and outliers. 
       3) Machine Learning & Deep Learning :-
                - Plot model accuracy, loss curves during training.
                - Compare model predictions visually.
       4) Reports & Dashboards :-
                - Add visuals in Jupyter Notebooks or PDF reports.
                - Useful for presenting results clearly.


 

 

 






      






































